# Import the required modules
import requests  # Used for HTTP requests
import argparse  # Used for parsing command-line arguments

# Function to parse command-line arguments
def get_arguments():

    # Initialize the parser
    parser = argparse.ArgumentParser()

    # Add the target argument
    parser.add_argument("-t", "--target", dest="target", help="Specify target URL or URL range")

    # Parse and return the arguments
    options = parser.parse_args()
    return options

# Function to perform a HTTP GET request
def request(url):
    try:

        # Attempt to get the content of the URL
        response = requests.get(url, timeout=10)  # Setting a timeout to avoid hanging
        return response
    except requests.exceptions.RequestException as e:

        # Print an error message if the request fails
        print(f"Request error for {url}: {e}")
        return None

# Function to scan for Cross-Site Scripting vulnerabilities
def scan_xss(url, vulnerabilities_found):
    print("Checking for XSS vulnerability...")

    # Define a test script to check for XSS
    xss_test_script = "<script>alert('XSS')</script>"

    # Perform the request
    response = request(url)

    # Check if the test script is reflected in the response
    if response and xss_test_script in response.text:
        print(f"[+] Possible XSS Vulnerability found at {url}")
        vulnerabilities_found["found"] = True  # Mark as found

# Placeholder function for SQL Injection scanning
def scan_sql_injection(url, vulnerabilities_found):
    print("Checking for SQL Injection vulnerability...")

    # Actual implementation should be here
    print("[-] SQL Injection scanning not implemented in this example.")

# Function to scan for exposed directories
def scan_directory(url, vulnerabilities_found):
    print("Checking for exposed directories...")

    # List of common directories to check
    directories = ["/admin", "/login", "/uploads", "/backup", "/wp-admin"]
    for directory in directories:

        # Construct the full URL
        full_url = f"{url}{directory}"

        # Perform the request
        response = request(full_url)

        # Check if the directory is accessible
        if response and response.status_code == 200:
            print(f"[+] Exposed Directory found at {full_url}")
            vulnerabilities_found["found"] = True  # Mark as found

# Main execution block
if __name__ == "__main__":

    # Get command-line arguments
    options = get_arguments()

    # Dictionary to track found vulnerabilities
    vulnerabilities_found = {"found": False}

    # Check if the target URL is provided
    if options.target:
        target_url = options.target

        # Ensure the URL starts with http:// or https://
        if not target_url.startswith("http"):
            target_url = "http://" + target_url

        # Perform the vulnerability scans
        scan_xss(target_url, vulnerabilities_found)

        # scan_sql_injection(target_url, vulnerabilities_found) # Commented out to indicate it's a placeholder
        scan_directory(target_url, vulnerabilities_found)

        # Check and print if no vulnerabilities are found
        if not vulnerabilities_found["found"]:
            print("No vulnerabilities found.")

    else:
        # Prompt the user to specify a target URL if not provided
        print("[-] Please specify a target URL. Use -h for help.")
